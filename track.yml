id: cs6flixvezu3
type: sandbox
version: 0.0.1
slug: kubernetes-concepts
icon: https://storage.googleapis.com/instruqt-frontend/img/tracks/kubernetes.png
title: Kubernetes concepts
teaser: Get familiar with the concepts of Kubernetes
description: |-
  Kubernetes is an open-source system for deploying, scaling, and managing containerized applications.

  Kubernetes groups containers into logical units to simplify management and discovery. Kubernetes is open sourced by Google, and builds upon [15 years of experience of running production workloads](http://queue.acm.org/detail.cfm?id=2898444). It combines this knowledge with the ideas and practices from the community.

  ![Kubernetes](https://storage.googleapis.com/instruqt-frontend/img/tracks/kubernetes/kubernetes.png)

  In this track you will learn about the parts of the Kubernetes system and the
  abstractions Kubernetes uses to represent your cluster, and helps you obtain
  a deeper understanding of how Kubernetes works.
tags:
- kubernetes
- containers
challenges:
- id: i3nrphyqxcoq
  type: ""
  slug: overview
  title: Overview
  teaser: High level overview of Kubernetes
  notes:
  - type: text
    contents: 'To work with Kubernetes, you use Kubernetes API objects to describe
      your cluster’s desired state: what applications or other workloads you want
      to run, what container images they use, the number of replicas, what network
      and disk resources you want to make available, and more.'
  - type: text
    contents: You set your desired state by creating objects using the Kubernetes
      API, typically via the command-line interface, `kubectl`. You can also use the
      Kubernetes API directly to interact with the cluster and set or modify your
      desired state.
  - type: text
    contents: Once you’ve set your desired state, the Kubernetes Control Plane works
      to make the cluster’s current state match the desired state. To do so, Kubernetes
      performs a variety of tasks automaticallysuch as starting or restarting containers,
      scaling the number of replicas of a given application, and more.
  - type: text
    contents: |-
      The Kubernetes Control Plane consists of a collection of processes running on your cluster:

      - The Kubernetes Master is a collection of three processes that run on a single node in your cluster, which is designated as the master node. Those processes are: kube-apiserver, kube-controller-manager and kube-scheduler.
      - Each individual non-master node in your cluster runs two processes:
        - [kubelet](https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/), which communicates with the Kubernetes Master.
        - [kube-proxy](https://kubernetes.io/docs/admin/kube-proxy/), a network proxy which reflects Kubernetes networking services on each node.
  difficulty: basic
  assignment: 'A Kubernetes cluster consists of:'
  timelimit: 300
  tabs:
  - type: terminal
    title: kubernetes
    hostname: kubernetes
- id: zlfq2bueggky
  type: ""
  slug: pod
  title: Pod
  teaser: The smallest deployable object in the Kubernetes object model
  notes:
  - type: text
    contents: 'Kubernetes contains a number of abstractions that represent the state
      of your system: deployed containerized applications and workloads, their associated
      network and disk resources, and other information about what your cluster is
      doing. These abstractions are represented by objects in the Kubernetes API;
      see the Kubernetes Objects overview for more details.'
  - type: image
    url: https://storage.googleapis.com/instruqt-frontend/img/tracks/kubernetes/pods.svg
  - type: text
    contents: A Pod is the basic building block of Kubernetes–the smallest and simplest
      unit in the Kubernetes object model that you create or deploy. A Pod represents
      a running process on your cluster.
  - type: text
    contents: 'A Pod encapsulates an application container (or, in some cases, multiple
      containers), storage resources, a unique network IP, and options that govern
      how the container(s) should run. A Pod represents a unit of deployment: a single
      instance of an application in Kubernetes, which might consist of either a single
      container or a small number of containers that are tightly coupled and that
      share resources.'
  - type: text
    contents: |-
      Pods in a Kubernetes cluster can be used in two main ways:

      - **Pods that run a single container.** The “one-container-per-Pod” model is the most common Kubernetes use case; in this case, you can think of a Pod as a wrapper around a single container, and Kubernetes manages the Pods rather than the containers directly.
      - **Pods that run multiple containers that need to work together.** A Pod might encapsulate an application composed of multiple co-located containers that are tightly coupled and need to share resources. These co-located containers might form a single cohesive unit of serviceone container serving files from a shared volume to the public, while a separate “sidecar” container refreshes or updates those files. The Pod wraps these containers and storage resources together as a single manageable entity.
  - type: text
    contents: Each Pod is meant to run a single instance of a given application. If
      you want to scale your application horizontally (e.g., run multiple instances),
      you should use multiple Pods, one for each instance. In Kubernetes, this is
      generally referred to as replication. Replicated Pods are usually created and
      managed as a group by an abstraction called a Controller. See Pods and Controllers
      for more information.
  difficulty: basic
  assignment: |-
    The assignment the participant needs to complete in order to proceed.

    You can use any GitHub flavoured markdown.
  timelimit: 300
  tabs:
  - type: terminal
    title: kubernetes
    hostname: kubernetes
- id: zbbzyssmmopc
  type: ""
  slug: service
  title: Service
  teaser: Services abstract a set of Pods
  notes:
  - type: text
    contents: 'Kubernetes Pods are mortal. They are born and when they die, they are
      not resurrected. ReplicaSets in particular create and destroy Pods dynamically
      (e.g. when scaling up or down). While each Pod gets its own IP address, even
      those IP addresses cannot be relied upon to be stable over time. This leads
      to a problem: if some set of Pods (let’s call them backends) provides functionality
      to other Pods (let’s call them frontends) inside the Kubernetes cluster, how
      do those frontends find out and keep track of which backends are in that set?'
  - type: text
    contents: Enter **Services**.
  - type: text
    contents: A Kubernetes **Service** is an abstraction which defines a logical set
      of **Pods** and a policy by which to access them - sometimes called a micro-service.
      The set of **Pods** targeted by a **Service** is (usually) determined by a **Label
      Selector**.
  - type: text
    contents: As an example, consider an image-processing backend which is running
      with 3 replicas. Those replicas are fungible - frontends do not care which backend
      they use. While the actual **Pods** that compose the backend set may change,
      the frontend clients should not need to be aware of that or keep track of the
      list of backends themselves. The **Service** abstraction enables this decoupling.
  - type: text
    contents: For Kubernetes-native applications, Kubernetes offers a simple Endpoints
      API that is updated whenever the set of **Pods** in a **Service** changes. For
      non-native applications, Kubernetes offers a virtual-IP-based bridge to **Services**
      which redirects to the backend **Pods**.
  difficulty: basic
  assignment: For more information on **Services**, visit the [Kubernetes Documentation](https://kubernetes.io/docs/concepts/services-networking/service/).
  timelimit: 300
  tabs:
  - type: terminal
    title: kubernetes
    hostname: kubernetes
- id: 2fnqdk7eqc5q
  type: ""
  slug: volume
  title: Volume
  teaser: A Volume is a directory which is accessible to Pods
  notes:
  - type: text
    contents: On-disk files in a Container are ephemeral, which presents some problems
      for non-trivial applications when running in Containers. First, when a Container
      crashes, kubelet will restart it, but the files will be lost - the Container
      starts with a clean state. Second, when running Containers together in a **Pod**
      it is often necessary to share files between those Containers. The Kubernetes
      **Volume** abstraction solves both of these problems.
  - type: text
    contents: At its core, a **Volume** is just a directory, possibly with some data
      in it, which is accessible to the Containers in a **Pod**. How that directory
      comes to be, the medium that backs it, and the contents of it are determined
      by the particular volume type used.
  - type: text
    contents: A Kubernetes **Volume** has an explicit lifetime - the same as the **Pod**
      that encloses it. Consequently, a volume outlives any Containers that run within
      the **Pod**, and data is preserved across Container restarts. When a **Pod**
      ceases to exist, the volume will cease to exist too. Kubernetes supports many
      types of **Volumes**, and a **Pod** can use any number of them simultaneously.
  - type: text
    contents: |-
      Some examples of **Volumes** are:

      - emptyDir - just an empty directory
      - azureDisk - a disk on Microsoft Azure
      - hostPath - a directory that lives on the node itself
      - nfs - an exported NFS share

      but there are many more. Take a look [here](https://kubernetes.io/docs/concepts/storage/volumes/#types-of-volumes).
  difficulty: basic
  assignment: ""
  timelimit: 300
  tabs:
  - type: terminal
    title: kubernetes
    hostname: kubernetes
- id: oeqwlu6lwwda
  type: ""
  slug: namespace
  title: Namespace
  teaser: Namespaces divides your cluster
  notes:
  - type: text
    contents: Namespaces are intended for use in environments with many users spread
      across multiple teams, or projects. For clusters with a few to tens of users,
      you should not need to create or think about namespaces at all. Start using
      namespaces when you need the features they provide.
  - type: text
    contents: Namespaces provide a scope for names. Names of resources need to be
      unique within a namespace, but not across namespaces.
  - type: text
    contents: Namespaces are a way to divide cluster resources between multiple users
      (via resource quota).
  - type: text
    contents: 'It is not necessary to use multiple namespaces just to separate slightly
      different resources, such as different versions of the same software: use labels
      to distinguish resources within the same namespace.'
  difficulty: basic
  assignment: |-
    The assignment the participant needs to complete in order to proceed.

    You can use any GitHub flavoured markdown.
  timelimit: 300
  tabs:
  - type: terminal
    title: kubernetes
    hostname: kubernetes
- id: xt8qk100y8y1
  type: ""
  slug: replicaset
  title: ReplicaSet
  teaser: Manage the number of running Pod replicas
  notes:
  - type: text
    contents: A **ReplicaSet** ensures that a specified number of **Pod** replicas
      are running at any given time.
  - type: text
    contents: While **ReplicaSets** can be used independently, today it’s mainly used
      by **Deployments** as a mechanism to orchestrate **Pod** creation, deletion
      and updates. When you use **Deployments** you don’t have to worry about managing
      the **ReplicaSets** that they create. **Deployments** own and manage their **ReplicaSets**.
  - type: text
    contents: 'This actually means that you may never need to manipulate **ReplicaSet**
      objects: use a **Deployment** instead, and define your application in the spec
      section.'
  difficulty: basic
  assignment: ""
  timelimit: 300
  tabs:
  - type: terminal
    title: kubernetes
    hostname: kubernetes
- id: ocnintxcofdx
  type: ""
  slug: deployment
  title: Deployment
  teaser: Manage Pods and ReplicaSets
  notes:
  - type: text
    contents: A **Deployment** controller provides declarative updates for **Pods**
      and **ReplicaSets**.
  - type: text
    contents: You describe a desired state in a **Deployment** object, and the **Deployment**
      controller changes the actual state to the desired state at a controlled rate.
      You can define **Deployments** to create new **ReplicaSets**, or to remove existing
      **Deployments** and adopt all their resources with new **Deployments**.
  - type: text
    contents: You can use **Deployments** to orchestrate **Pod** creation, upgrades,
      and deletion. The **Deployment** manages the **ReplicaSet** accordingly.
  difficulty: basic
  assignment: ""
  timelimit: 300
  tabs:
  - type: terminal
    title: kubernetes
    hostname: kubernetes
- id: ntqbvks1pic8
  type: ""
  slug: statefulset
  title: StatefulSet
  teaser: StatefulSets are used to manage stateful applications.
  notes:
  - type: text
    contents: A **StatefulSet** manages the deployment and scaling of a set of **Pods**,
      and provides guarantees about the ordering and uniqueness of these **Pods**.
  - type: text
    contents: |-
      StatefulSets are valuable for applications that require one or more of the following.

      - Stable, unique network identifiers.
      - Stable, persistent storage.
      - Ordered, graceful deployment and scaling.
      - Ordered, graceful deletion and termination.
      - Ordered, automated rolling updates.
  - type: text
    contents: |-
      Use cases for StatefulSets are:

      - Deploying a clustered resource (e.g. Cassandra, Elasticsearch)
      - Applications that somehow depend on each other
  difficulty: basic
  assignment: ""
  timelimit: 300
  tabs:
  - type: terminal
    title: kubernetes
    hostname: kubernetes
- id: 3q6cykqcdrm3
  type: ""
  slug: daemonset
  title: DaemonSet
  teaser: Run a Pod on all (or some) Nodes with a DaemonSet
  notes:
  - type: text
    contents: A **DaemonSet** ensures that all (or some) Nodes run a copy of a Pod.
  - type: text
    contents: As nodes are added to the cluster, Pods are added to them. As nodes
      are removed from the cluster, those Pods are garbage collected. Deleting a DaemonSet
      will clean up the Pods it created.
  - type: text
    contents: |-
      Some typical uses of a DaemonSet are:

      - running a cluster storage daemon, such as `glusterd` and `ceph` on each node.
      - running a logs collection daemon on every node, such as `fluentd` or `logstash`.
      - running a node monitoring daemon on every node, such as `Prometheus Node Exporter`, `collectd`, `Datadog agent`, `New Relic agent`, or `Ganglia gmond`.
  difficulty: basic
  assignment: ""
  timelimit: 300
  tabs:
  - type: terminal
    title: kubernetes
    hostname: kubernetes
- id: nxwnnjtsew9f
  type: ""
  slug: job
  title: Job
  teaser: Run one-off Jobs on Kubernetes
  notes:
  - type: text
    contents: A **Job** creates one or more **Pods** and ensures that a specified
      number of them successfully terminate.
  - type: text
    contents: As **Pods** successfully complete, the **Job** tracks the successful
      completions. When a specified number of successful completions is reached, the
      **Job** itself is complete. Deleting a **Job** will cleanup the **Pods** it
      created.
  - type: text
    contents: A simple case is to create one **Job** object in order to reliably run
      one **Pod** to completion. The **Job** object will start a new **Pod** if the
      first **Pod** fails or is deleted (for example due to a node hardware failure
      or a node reboot).
  - type: text
    contents: A **Job** can also be used to run multiple **Pods** in parallel.
  difficulty: basic
  assignment: ""
  timelimit: 300
  tabs:
  - type: terminal
    title: kubernetes
    hostname: kubernetes
- id: wzns0fyyantc
  type: ""
  slug: controlplane
  title: Controlplane
  teaser: The backbone of Kubernetes
  notes:
  - type: text
    contents: The various parts of the Kubernetes Control Plane, such as the Kubernetes
      Master and kubelet processes, govern how Kubernetes communicates with your cluster.
      The Control Plane maintains a record of all of the Kubernetes Objects in the
      system, and runs continuous control loops to manage those objects’ state. At
      any given time, the Control Plane’s control loops will respond to changes in
      the cluster and work to make the actual state of all the objects in the system
      match the desired state that you provided.
  - type: text
    contents: For example, when you use the Kubernetes API to create a Deployment
      object, you provide a new desired state for the system. The Kubernetes Control
      Plane records that object creation, and carries out your instructions by starting
      the required applications and scheduling them to cluster nodes–thus making the
      cluster’s actual state match the desired state.
  - type: text
    contents: |-
      # Kubernetes Master
      #
      The Kubernetes master is responsible for maintaining the desired state for your cluster. When you interact with Kubernetes, such as by using the kubectl command-line interface, you’re communicating with your cluster’s Kubernetes master.

      The “master” refers to a collection of processes managing the cluster state. Typically these processes are all run on a single node in the cluster, and this node is also referred to as the master. The master can also be replicated for availability and redundancy.
  - type: text
    contents: |-
      # Kubernetes Nodes
      #
      The nodes in a cluster are the machines (VMs, physical servers, etc) that run your applications and cloud workflows. The Kubernetes master controls each node; you’ll rarely interact with nodes directly.
  - type: image
    url: https://storage.googleapis.com/instruqt-frontend/img/tracks/kubernetes/nodes.svg
  difficulty: basic
  assignment: |-
    The assignment the participant needs to complete in order to proceed.

    You can use any GitHub flavoured markdown.
  timelimit: 300
  tabs:
  - type: terminal
    title: kubernetes
    hostname: kubernetes
developers:
- bas@instruqt.com
published: false
private: false
